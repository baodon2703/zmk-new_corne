#include <dt-bindings/zmk/behaviors.h>
#include <dt-bindings/zmk/keys.h>
#include <zmk-helpers/helper.h>

// Navigation
ZMK_MACRO(next_desk, bindings = <&kp LG(RIGHT) >;)

// Zoom
ZMK_MACRO(zoom_out, bindings = <&kp LC(MINUS)>;)
ZMK_MACRO(zoom_in,  bindings = <&kp LC(EQUAL)>;)
ZMK_MACRO(zoom_reset,  bindings = <&kp LC(N0)>;)

// Screenshots
ZMK_MACRO(ss_zone, bindings = <&kp LC(LS(N2))>;) 
ZMK_MACRO(ss_mc_zone, bindings = <&kp LC(LS(N4))>;)

// Close windows
ZMK_MACRO(close_win, bindings = <&kp LC(W)>;) 
ZMK_MACRO(close_app, bindings = <&kp LC(Q)>;)

// Undo Redo
ZMK_MACRO(undo, bindings = <&kp LC(Z)>;) 
ZMK_MACRO(redo, bindings = <&kp LC(LS(Z))>;)

// Common actions
ZMK_MACRO(find,                   bindings = <&kp LC(F)>;) 
ZMK_MACRO(new_file,               bindings = <&kp LC(N)>;)
ZMK_MACRO(new_tab,                bindings = <&kp LC(T)>;)
ZMK_MACRO(save_file,              bindings = <&kp LC(S)>;)
ZMK_MACRO(refresh,                bindings = <&kp LC(R)>;)
ZMK_MACRO(quick_cmd_tab,          bindings = <&kp LC(TAB)>;)


// Sticky modifier combinations - Meh key (GUI + Shift + Alt)
ZMK_MACRO(sticky_meh, bindings = <&sk LGUI>, <&sk LSHFT>, <&sk LALT>;)

// Omarchy Navigation
// Window management
ZMK_MACRO(om_close_win, bindings = <&kp LG(W)>;)                    // Super + W: Close window
ZMK_MACRO(om_toggle_tile, bindings = <&kp LG(T)>;)                  // Super + T: Toggle tiling/floating
ZMK_MACRO(om_fullscreen, bindings = <&kp LG(F)>;)                   // Super + F: Full screen
ZMK_MACRO(om_full_width, bindings = <&kp LG(LA(F))>;)               // Super + Alt + F: Full width
ZMK_MACRO(om_grouping, bindings = <&kp LG(G)>;)                     // Super + G: Toggle grouping

// Workspace navigation
ZMK_MACRO(om_ws1, bindings = <&kp LG(N1)>;)                         // Super + 1: Workspace 1
ZMK_MACRO(om_ws2, bindings = <&kp LG(N2)>;)                         // Super + 2: Workspace 2
ZMK_MACRO(om_ws3, bindings = <&kp LG(N3)>;)                         // Super + 3: Workspace 3
ZMK_MACRO(om_ws4, bindings = <&kp LG(N4)>;)                         // Super + 4: Workspace 4
ZMK_MACRO(om_ws_next, bindings = <&kp LG(TAB)>;)                    // Super + Tab: Next workspace
ZMK_MACRO(om_ws_prev, bindings = <&kp LG(LS(TAB))>;)                // Super + Shift + Tab: Previous workspace
ZMK_MACRO(om_ws_former, bindings = <&kp LG(LC(TAB))>;)              // Super + Ctrl + Tab: Former workspace

// Move window to workspace
ZMK_MACRO(om_mv_ws1, bindings = <&kp LG(LS(N1))>;)                  // Shift + Super + 1
ZMK_MACRO(om_mv_ws2, bindings = <&kp LG(LS(N2))>;)                  // Shift + Super + 2
ZMK_MACRO(om_mv_ws3, bindings = <&kp LG(LS(N3))>;)                  // Shift + Super + 3
ZMK_MACRO(om_mv_ws4, bindings = <&kp LG(LS(N4))>;)                  // Shift + Super + 4

// Focus window in direction
ZMK_MACRO(om_focus_up, bindings = <&kp LG(UP)>;)                    // Super + Arrow Up
ZMK_MACRO(om_focus_down, bindings = <&kp LG(DOWN)>;)                // Super + Arrow Down
ZMK_MACRO(om_focus_left, bindings = <&kp LG(LEFT)>;)                // Super + Arrow Left
ZMK_MACRO(om_focus_right, bindings = <&kp LG(RIGHT)>;)              // Super + Arrow Right

// Swap window in direction
ZMK_MACRO(om_swap_up, bindings = <&kp LG(LS(UP))>;)                 // Super + Shift + Arrow Up
ZMK_MACRO(om_swap_down, bindings = <&kp LG(LS(DOWN))>;)             // Super + Shift + Arrow Down
ZMK_MACRO(om_swap_left, bindings = <&kp LG(LS(LEFT))>;)             // Super + Shift + Arrow Left
ZMK_MACRO(om_swap_right, bindings = <&kp LG(LS(RIGHT))>;)           // Super + Shift + Arrow Right

// Grow windows
ZMK_MACRO(om_grow_left, bindings = <&kp LG(EQUAL)>;)                // Super + Equal: Grow left
ZMK_MACRO(om_grow_right, bindings = <&kp LG(MINUS)>;)               // Super + Minus: Grow right
ZMK_MACRO(om_grow_bottom, bindings = <&kp LG(LS(EQUAL))>;)          // Super + Shift + Equal: Grow bottom
ZMK_MACRO(om_grow_top, bindings = <&kp LG(LS(MINUS))>;)             // Super + Shift + Minus: Grow top
